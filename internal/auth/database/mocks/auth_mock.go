// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/M0hammedImran/go-server-template/internal/auth/model"
)

// AuthTokenDB is an autogenerated mock type for the AuthTokenDB type
type AuthTokenDB struct {
	mock.Mock
}

// DeleteAuthToken provides a mock function with given fields: ctx, uuid
func (_m *AuthTokenDB) DeleteAuthToken(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAuthTokenByUUID provides a mock function with given fields: ctx, uuid
func (_m *AuthTokenDB) FindAuthTokenByUUID(ctx context.Context, uuid string) (*model.AuthToken, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for FindAuthTokenByUUID")
	}

	var r0 *model.AuthToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AuthToken, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AuthToken); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, authToken
func (_m *AuthTokenDB) Save(ctx context.Context, authToken *model.AuthToken) error {
	ret := _m.Called(ctx, authToken)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AuthToken) error); ok {
		r0 = rf(ctx, authToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, uuid, authToken
func (_m *AuthTokenDB) Update(ctx context.Context, uuid string, authToken *model.AuthToken) error {
	ret := _m.Called(ctx, uuid, authToken)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.AuthToken) error); ok {
		r0 = rf(ctx, uuid, authToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthTokenDB creates a new instance of AuthTokenDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthTokenDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthTokenDB {
	mock := &AuthTokenDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
